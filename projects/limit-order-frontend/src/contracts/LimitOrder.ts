/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"LimitOrder","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createOrder","args":[{"name":"assetSendTxn","type":"txn"},{"name":"mbrTxn","type":"pay"},{"name":"takingAsset","type":"uint64"},{"name":"takingAmount","type":"uint64"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"claimOrder","args":[{"name":"orderId","type":"uint64"},{"name":"assetSendTxn","type":"txn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"claimOwnerAsset","args":[{"name":"orderId","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"optInToAsset","args":[{"name":"assetId","type":"uint64"},{"name":"mbrTxn","type":"pay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"cancelOrder","args":[{"name":"orderId","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Order":[{"name":"id","type":"uint64"},{"name":"owner","type":"address"},{"name":"givingAsset","type":"uint64"},{"name":"takingAsset","type":"uint64"},{"name":"givingAmount","type":"uint64"},{"name":"takingAmount","type":"uint64"},{"name":"completed","type":"bool"},{"name":"ownerClaimed","type":"bool"}]},"state":{"schema":{"global":{"bytes":0,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"orderIndex":{"key":"b3JkZXJJbmRleA==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"orders":{"keyType":"uint64","valueType":"Order"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\LimitOrder.algo.ts:16","pc":[0]},{"teal":2,"source":"contracts\\LimitOrder.algo.ts:16","pc":[1,2,3,4,5,6,7,8,9,10,11,12]},{"teal":3,"source":"contracts\\LimitOrder.algo.ts:16","pc":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]},{"teal":15,"source":"contracts\\LimitOrder.algo.ts:16","pc":[29,30]},{"teal":16,"source":"contracts\\LimitOrder.algo.ts:16","pc":[31]},{"teal":17,"source":"contracts\\LimitOrder.algo.ts:16","pc":[32,33]},{"teal":18,"source":"contracts\\LimitOrder.algo.ts:16","pc":[34]},{"teal":19,"source":"contracts\\LimitOrder.algo.ts:16","pc":[35,36]},{"teal":20,"source":"contracts\\LimitOrder.algo.ts:16","pc":[37]},{"teal":21,"source":"contracts\\LimitOrder.algo.ts:16","pc":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63]},{"teal":25,"source":"contracts\\LimitOrder.algo.ts:16","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[64]},{"teal":30,"source":"contracts\\LimitOrder.algo.ts:21","pc":[65,66,67]},{"teal":31,"source":"contracts\\LimitOrder.algo.ts:21","pc":[68]},{"teal":32,"source":"contracts\\LimitOrder.algo.ts:21","pc":[69]},{"teal":36,"source":"contracts\\LimitOrder.algo.ts:21","pc":[70,71,72]},{"teal":40,"source":"contracts\\LimitOrder.algo.ts:22","pc":[73]},{"teal":41,"source":"contracts\\LimitOrder.algo.ts:22","pc":[74]},{"teal":42,"source":"contracts\\LimitOrder.algo.ts:22","pc":[75]},{"teal":43,"source":"contracts\\LimitOrder.algo.ts:21","pc":[76]},{"teal":48,"source":"contracts\\LimitOrder.algo.ts:25","pc":[77,78,79,80,81,82]},{"teal":51,"source":"contracts\\LimitOrder.algo.ts:25","pc":[83,84,85]},{"teal":52,"source":"contracts\\LimitOrder.algo.ts:25","pc":[86]},{"teal":55,"source":"contracts\\LimitOrder.algo.ts:25","pc":[87,88,89]},{"teal":56,"source":"contracts\\LimitOrder.algo.ts:25","pc":[90]},{"teal":59,"source":"contracts\\LimitOrder.algo.ts:25","pc":[91,92]},{"teal":60,"source":"contracts\\LimitOrder.algo.ts:25","pc":[93]},{"teal":61,"source":"contracts\\LimitOrder.algo.ts:25","pc":[94]},{"teal":62,"source":"contracts\\LimitOrder.algo.ts:25","pc":[95]},{"teal":63,"source":"contracts\\LimitOrder.algo.ts:25","pc":[96,97]},{"teal":64,"source":"contracts\\LimitOrder.algo.ts:25","pc":[98]},{"teal":65,"source":"contracts\\LimitOrder.algo.ts:25","pc":[99]},{"teal":68,"source":"contracts\\LimitOrder.algo.ts:25","errorMessage":"argument 2 (mbrTxn) for createOrder must be a pay transaction","pc":[100]},{"teal":71,"source":"contracts\\LimitOrder.algo.ts:25","pc":[101,102]},{"teal":72,"source":"contracts\\LimitOrder.algo.ts:25","pc":[103,104]},{"teal":73,"source":"contracts\\LimitOrder.algo.ts:25","pc":[105]},{"teal":76,"source":"contracts\\LimitOrder.algo.ts:25","pc":[106,107,108]},{"teal":77,"source":"contracts\\LimitOrder.algo.ts:25","pc":[109]},{"teal":78,"source":"contracts\\LimitOrder.algo.ts:25","pc":[110]},{"teal":79,"source":"contracts\\LimitOrder.algo.ts:25","pc":[111]},{"teal":80,"source":"contracts\\LimitOrder.algo.ts:25","pc":[112]},{"teal":81,"source":"contracts\\LimitOrder.algo.ts:25","pc":[113]},{"teal":85,"source":"contracts\\LimitOrder.algo.ts:25","pc":[114,115,116]},{"teal":88,"source":"contracts\\LimitOrder.algo.ts:25","pc":[117]},{"teal":92,"source":"contracts\\LimitOrder.algo.ts:26","pc":[118,119]},{"teal":93,"source":"contracts\\LimitOrder.algo.ts:26","pc":[120,121]},{"teal":94,"source":"contracts\\LimitOrder.algo.ts:26","pc":[122,123]},{"teal":95,"source":"contracts\\LimitOrder.algo.ts:26","pc":[124]},{"teal":96,"source":"contracts\\LimitOrder.algo.ts:26","pc":[125]},{"teal":99,"source":"contracts\\LimitOrder.algo.ts:26","errorMessage":"Taking asset is not opted in","pc":[126]},{"teal":103,"source":"contracts\\LimitOrder.algo.ts:27","pc":[127,128]},{"teal":104,"source":"contracts\\LimitOrder.algo.ts:27","pc":[129,130]},{"teal":105,"source":"contracts\\LimitOrder.algo.ts:27","pc":[131,132]},{"teal":106,"source":"contracts\\LimitOrder.algo.ts:27","pc":[133]},{"teal":109,"source":"contracts\\LimitOrder.algo.ts:27","errorMessage":"Invalid sender","pc":[134]},{"teal":113,"source":"contracts\\LimitOrder.algo.ts:28","pc":[135,136]},{"teal":114,"source":"contracts\\LimitOrder.algo.ts:28","pc":[137,138]},{"teal":115,"source":"contracts\\LimitOrder.algo.ts:28","pc":[139,140]},{"teal":116,"source":"contracts\\LimitOrder.algo.ts:28","pc":[141,142,143]},{"teal":117,"source":"contracts\\LimitOrder.algo.ts:28","pc":[144,145]},{"teal":122,"source":"contracts\\LimitOrder.algo.ts:29","pc":[146,147]},{"teal":123,"source":"contracts\\LimitOrder.algo.ts:29","pc":[148,149]},{"teal":124,"source":"contracts\\LimitOrder.algo.ts:29","pc":[150,151]},{"teal":125,"source":"contracts\\LimitOrder.algo.ts:29","pc":[152]},{"teal":128,"source":"contracts\\LimitOrder.algo.ts:29","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=BOX_MBR\"}","pc":[153]},{"teal":132,"source":"contracts\\LimitOrder.algo.ts:30","pc":[154]},{"teal":133,"source":"contracts\\LimitOrder.algo.ts:30","pc":[155]},{"teal":134,"source":"contracts\\LimitOrder.algo.ts:30","pc":[156]},{"teal":135,"source":"contracts\\LimitOrder.algo.ts:30","pc":[157,158]},{"teal":136,"source":"contracts\\LimitOrder.algo.ts:30","pc":[159]},{"teal":140,"source":"contracts\\LimitOrder.algo.ts:31","pc":[160]},{"teal":141,"source":"contracts\\LimitOrder.algo.ts:31","pc":[161]},{"teal":142,"source":"contracts\\LimitOrder.algo.ts:31","pc":[162]},{"teal":143,"source":"contracts\\LimitOrder.algo.ts:31","pc":[163]},{"teal":144,"source":"contracts\\LimitOrder.algo.ts:31","pc":[164]},{"teal":145,"source":"contracts\\LimitOrder.algo.ts:31","pc":[165]},{"teal":146,"source":"contracts\\LimitOrder.algo.ts:31","pc":[166]},{"teal":150,"source":"contracts\\LimitOrder.algo.ts:32","pc":[167,168]},{"teal":151,"source":"contracts\\LimitOrder.algo.ts:32","pc":[169,170]},{"teal":152,"source":"contracts\\LimitOrder.algo.ts:32","pc":[171,172]},{"teal":153,"source":"contracts\\LimitOrder.algo.ts:32","pc":[173,174,175]},{"teal":154,"source":"contracts\\LimitOrder.algo.ts:32","pc":[176]},{"teal":157,"source":"contracts\\LimitOrder.algo.ts:25","pc":[177,178]},{"teal":158,"source":"contracts\\LimitOrder.algo.ts:25","pc":[179]},{"teal":162,"source":"contracts\\LimitOrder.algo.ts:35","pc":[180,181,182]},{"teal":169,"source":"contracts\\LimitOrder.algo.ts:37","pc":[183,184]},{"teal":170,"source":"contracts\\LimitOrder.algo.ts:37","pc":[185,186]},{"teal":171,"source":"contracts\\LimitOrder.algo.ts:37","pc":[187]},{"teal":172,"source":"contracts\\LimitOrder.algo.ts:37","pc":[188]},{"teal":173,"source":"contracts\\LimitOrder.algo.ts:37","pc":[189]},{"teal":174,"source":"contracts\\LimitOrder.algo.ts:37","pc":[190,191,192]},{"teal":175,"source":"contracts\\LimitOrder.algo.ts:37","pc":[193,194]},{"teal":176,"source":"contracts\\LimitOrder.algo.ts:37","pc":[195,196]},{"teal":177,"source":"contracts\\LimitOrder.algo.ts:37","pc":[197]},{"teal":178,"source":"contracts\\LimitOrder.algo.ts:37","pc":[198]},{"teal":179,"source":"contracts\\LimitOrder.algo.ts:37","pc":[199]},{"teal":183,"source":"contracts\\LimitOrder.algo.ts:36","errorMessage":"Invalid transaction type","pc":[200]},{"teal":188,"source":"contracts\\LimitOrder.algo.ts:40","pc":[201,202]},{"teal":189,"source":"contracts\\LimitOrder.algo.ts:40","pc":[203,204]},{"teal":190,"source":"contracts\\LimitOrder.algo.ts:40","pc":[205]},{"teal":191,"source":"contracts\\LimitOrder.algo.ts:40","pc":[206]},{"teal":192,"source":"contracts\\LimitOrder.algo.ts:40","pc":[207,208,209]},{"teal":197,"source":"contracts\\LimitOrder.algo.ts:41","pc":[210,211]},{"teal":198,"source":"contracts\\LimitOrder.algo.ts:41","pc":[212,213]},{"teal":199,"source":"contracts\\LimitOrder.algo.ts:41","pc":[214,215]},{"teal":200,"source":"contracts\\LimitOrder.algo.ts:41","pc":[216]},{"teal":203,"source":"contracts\\LimitOrder.algo.ts:41","errorMessage":"Invalid receiver","pc":[217]},{"teal":216,"source":"contracts\\LimitOrder.algo.ts:43","pc":[218]},{"teal":217,"source":"contracts\\LimitOrder.algo.ts:43","pc":[219]},{"teal":218,"source":"contracts\\LimitOrder.algo.ts:43","pc":[220]},{"teal":219,"source":"contracts\\LimitOrder.algo.ts:44","pc":[221,222]},{"teal":220,"source":"contracts\\LimitOrder.algo.ts:44","pc":[223]},{"teal":221,"source":"contracts\\LimitOrder.algo.ts:45","pc":[224,225,226,227,228,229,230,231,232,233]},{"teal":222,"source":"contracts\\LimitOrder.algo.ts:45","pc":[234]},{"teal":223,"source":"contracts\\LimitOrder.algo.ts:46","pc":[235,236]},{"teal":224,"source":"contracts\\LimitOrder.algo.ts:46","pc":[237]},{"teal":225,"source":"contracts\\LimitOrder.algo.ts:46","pc":[238]},{"teal":226,"source":"contracts\\LimitOrder.algo.ts:47","pc":[239,240]},{"teal":227,"source":"contracts\\LimitOrder.algo.ts:47","pc":[241,242]},{"teal":228,"source":"contracts\\LimitOrder.algo.ts:47","pc":[243]},{"teal":229,"source":"contracts\\LimitOrder.algo.ts:47","pc":[244]},{"teal":230,"source":"contracts\\LimitOrder.algo.ts:48","pc":[245,246]},{"teal":231,"source":"contracts\\LimitOrder.algo.ts:48","pc":[247]},{"teal":232,"source":"contracts\\LimitOrder.algo.ts:48","pc":[248]},{"teal":233,"source":"contracts\\LimitOrder.algo.ts:49","pc":[249]},{"teal":234,"source":"contracts\\LimitOrder.algo.ts:49","pc":[250]},{"teal":235,"source":"contracts\\LimitOrder.algo.ts:49","pc":[251]},{"teal":236,"source":"contracts\\LimitOrder.algo.ts:49","pc":[252]},{"teal":237,"source":"contracts\\LimitOrder.algo.ts:50","pc":[253]},{"teal":238,"source":"contracts\\LimitOrder.algo.ts:50","pc":[254]},{"teal":239,"source":"contracts\\LimitOrder.algo.ts:50","pc":[255]},{"teal":240,"source":"contracts\\LimitOrder.algo.ts:42","pc":[256]},{"teal":241,"source":"contracts\\LimitOrder.algo.ts:42","pc":[257]},{"teal":246,"source":"contracts\\LimitOrder.algo.ts:53","pc":[258,259]},{"teal":247,"source":"contracts\\LimitOrder.algo.ts:53","pc":[260,261]},{"teal":248,"source":"contracts\\LimitOrder.algo.ts:53","pc":[262,263]},{"teal":249,"source":"contracts\\LimitOrder.algo.ts:53","pc":[264]},{"teal":252,"source":"contracts\\LimitOrder.algo.ts:53","errorMessage":"Invalid receiver","pc":[265]},{"teal":265,"source":"contracts\\LimitOrder.algo.ts:55","pc":[266]},{"teal":266,"source":"contracts\\LimitOrder.algo.ts:55","pc":[267]},{"teal":267,"source":"contracts\\LimitOrder.algo.ts:55","pc":[268]},{"teal":268,"source":"contracts\\LimitOrder.algo.ts:56","pc":[269,270]},{"teal":269,"source":"contracts\\LimitOrder.algo.ts:56","pc":[271]},{"teal":270,"source":"contracts\\LimitOrder.algo.ts:57","pc":[272,273]},{"teal":271,"source":"contracts\\LimitOrder.algo.ts:57","pc":[274,275]},{"teal":272,"source":"contracts\\LimitOrder.algo.ts:57","pc":[276]},{"teal":273,"source":"contracts\\LimitOrder.algo.ts:57","pc":[277]},{"teal":274,"source":"contracts\\LimitOrder.algo.ts:58","pc":[278,279]},{"teal":275,"source":"contracts\\LimitOrder.algo.ts:58","pc":[280]},{"teal":276,"source":"contracts\\LimitOrder.algo.ts:58","pc":[281]},{"teal":277,"source":"contracts\\LimitOrder.algo.ts:59","pc":[282,283]},{"teal":278,"source":"contracts\\LimitOrder.algo.ts:59","pc":[284,285]},{"teal":279,"source":"contracts\\LimitOrder.algo.ts:59","pc":[286]},{"teal":280,"source":"contracts\\LimitOrder.algo.ts:59","pc":[287]},{"teal":281,"source":"contracts\\LimitOrder.algo.ts:60","pc":[288,289]},{"teal":282,"source":"contracts\\LimitOrder.algo.ts:60","pc":[290]},{"teal":283,"source":"contracts\\LimitOrder.algo.ts:60","pc":[291]},{"teal":284,"source":"contracts\\LimitOrder.algo.ts:61","pc":[292]},{"teal":285,"source":"contracts\\LimitOrder.algo.ts:61","pc":[293]},{"teal":286,"source":"contracts\\LimitOrder.algo.ts:61","pc":[294]},{"teal":287,"source":"contracts\\LimitOrder.algo.ts:61","pc":[295]},{"teal":288,"source":"contracts\\LimitOrder.algo.ts:62","pc":[296]},{"teal":289,"source":"contracts\\LimitOrder.algo.ts:62","pc":[297]},{"teal":290,"source":"contracts\\LimitOrder.algo.ts:62","pc":[298]},{"teal":291,"source":"contracts\\LimitOrder.algo.ts:54","pc":[299]},{"teal":292,"source":"contracts\\LimitOrder.algo.ts:35","pc":[300]},{"teal":297,"source":"contracts\\LimitOrder.algo.ts:66","pc":[301,302]},{"teal":298,"source":"contracts\\LimitOrder.algo.ts:66","pc":[303]},{"teal":299,"source":"contracts\\LimitOrder.algo.ts:66","pc":[304]},{"teal":302,"source":"contracts\\LimitOrder.algo.ts:66","pc":[305,306,307]},{"teal":303,"source":"contracts\\LimitOrder.algo.ts:66","pc":[308]},{"teal":306,"source":"contracts\\LimitOrder.algo.ts:66","pc":[309,310,311]},{"teal":307,"source":"contracts\\LimitOrder.algo.ts:66","pc":[312]},{"teal":308,"source":"contracts\\LimitOrder.algo.ts:66","pc":[313]},{"teal":312,"source":"contracts\\LimitOrder.algo.ts:66","pc":[314,315,316]},{"teal":315,"source":"contracts\\LimitOrder.algo.ts:66","pc":[317]},{"teal":316,"source":"contracts\\LimitOrder.algo.ts:66","pc":[318]},{"teal":320,"source":"contracts\\LimitOrder.algo.ts:67","pc":[319,320]},{"teal":321,"source":"contracts\\LimitOrder.algo.ts:67","pc":[321]},{"teal":322,"source":"contracts\\LimitOrder.algo.ts:67","pc":[322]},{"teal":323,"source":"contracts\\LimitOrder.algo.ts:67","pc":[323]},{"teal":324,"source":"contracts\\LimitOrder.algo.ts:67","pc":[324]},{"teal":327,"source":"contracts\\LimitOrder.algo.ts:67","errorMessage":"Order not found","pc":[325]},{"teal":331,"source":"contracts\\LimitOrder.algo.ts:68","pc":[326,327]},{"teal":332,"source":"contracts\\LimitOrder.algo.ts:68","pc":[328]},{"teal":333,"source":"contracts\\LimitOrder.algo.ts:68","pc":[329,330]},{"teal":337,"source":"contracts\\LimitOrder.algo.ts:68","pc":[331,332]},{"teal":338,"source":"contracts\\LimitOrder.algo.ts:68","pc":[333]},{"teal":341,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[334]},{"teal":342,"source":"contracts\\LimitOrder.algo.ts:69","pc":[335,336]},{"teal":343,"source":"contracts\\LimitOrder.algo.ts:69","pc":[337,338]},{"teal":344,"source":"contracts\\LimitOrder.algo.ts:69","pc":[339]},{"teal":345,"source":"contracts\\LimitOrder.algo.ts:69","pc":[340]},{"teal":346,"source":"contracts\\LimitOrder.algo.ts:69","pc":[341]},{"teal":349,"source":"contracts\\LimitOrder.algo.ts:69","errorMessage":"Order already completed","pc":[342]},{"teal":356,"source":"contracts\\LimitOrder.algo.ts:71","pc":[343,344]},{"teal":357,"source":"contracts\\LimitOrder.algo.ts:71","pc":[345,346]},{"teal":358,"source":"contracts\\LimitOrder.algo.ts:71","pc":[347]},{"teal":359,"source":"contracts\\LimitOrder.algo.ts:71","pc":[348]},{"teal":360,"source":"contracts\\LimitOrder.algo.ts:71","pc":[349]},{"teal":361,"source":"contracts\\LimitOrder.algo.ts:71","pc":[350,351,352]},{"teal":362,"source":"contracts\\LimitOrder.algo.ts:71","pc":[353,354]},{"teal":363,"source":"contracts\\LimitOrder.algo.ts:71","pc":[355,356]},{"teal":364,"source":"contracts\\LimitOrder.algo.ts:71","pc":[357]},{"teal":365,"source":"contracts\\LimitOrder.algo.ts:71","pc":[358]},{"teal":366,"source":"contracts\\LimitOrder.algo.ts:71","pc":[359]},{"teal":370,"source":"contracts\\LimitOrder.algo.ts:70","errorMessage":"Invalid transaction type","pc":[360]},{"teal":375,"source":"contracts\\LimitOrder.algo.ts:74","pc":[361,362]},{"teal":376,"source":"contracts\\LimitOrder.algo.ts:74","pc":[363,364]},{"teal":377,"source":"contracts\\LimitOrder.algo.ts:74","pc":[365]},{"teal":378,"source":"contracts\\LimitOrder.algo.ts:74","pc":[366]},{"teal":379,"source":"contracts\\LimitOrder.algo.ts:74","pc":[367,368,369]},{"teal":384,"source":"contracts\\LimitOrder.algo.ts:68","pc":[370,371]},{"teal":385,"source":"contracts\\LimitOrder.algo.ts:68","pc":[372]},{"teal":388,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[373]},{"teal":389,"source":"contracts\\LimitOrder.algo.ts:75","pc":[374,375]},{"teal":390,"source":"contracts\\LimitOrder.algo.ts:75","pc":[376,377]},{"teal":391,"source":"contracts\\LimitOrder.algo.ts:75","pc":[378,379,380]},{"teal":392,"source":"contracts\\LimitOrder.algo.ts:75","pc":[381]},{"teal":393,"source":"contracts\\LimitOrder.algo.ts:75","pc":[382]},{"teal":394,"source":"contracts\\LimitOrder.algo.ts:75","pc":[383]},{"teal":397,"source":"contracts\\LimitOrder.algo.ts:75","errorMessage":"Invalid giving asset","pc":[384]},{"teal":401,"source":"contracts\\LimitOrder.algo.ts:68","pc":[385,386]},{"teal":402,"source":"contracts\\LimitOrder.algo.ts:68","pc":[387]},{"teal":405,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[388]},{"teal":406,"source":"contracts\\LimitOrder.algo.ts:76","pc":[389,390]},{"teal":407,"source":"contracts\\LimitOrder.algo.ts:76","pc":[391,392]},{"teal":408,"source":"contracts\\LimitOrder.algo.ts:76","pc":[393,394,395]},{"teal":409,"source":"contracts\\LimitOrder.algo.ts:76","pc":[396]},{"teal":410,"source":"contracts\\LimitOrder.algo.ts:76","pc":[397,398]},{"teal":411,"source":"contracts\\LimitOrder.algo.ts:76","pc":[399,400]},{"teal":412,"source":"contracts\\LimitOrder.algo.ts:76","pc":[401]},{"teal":415,"source":"contracts\\LimitOrder.algo.ts:76","errorMessage":"Invalid giving amount","pc":[402]},{"teal":419,"source":"contracts\\LimitOrder.algo.ts:77","pc":[403,404]},{"teal":420,"source":"contracts\\LimitOrder.algo.ts:77","pc":[405,406]},{"teal":421,"source":"contracts\\LimitOrder.algo.ts:77","pc":[407,408]},{"teal":422,"source":"contracts\\LimitOrder.algo.ts:77","pc":[409]},{"teal":425,"source":"contracts\\LimitOrder.algo.ts:77","errorMessage":"Invalid sender","pc":[410]},{"teal":429,"source":"contracts\\LimitOrder.algo.ts:78","pc":[411,412]},{"teal":430,"source":"contracts\\LimitOrder.algo.ts:78","pc":[413,414]},{"teal":431,"source":"contracts\\LimitOrder.algo.ts:78","pc":[415,416]},{"teal":432,"source":"contracts\\LimitOrder.algo.ts:78","pc":[417]},{"teal":435,"source":"contracts\\LimitOrder.algo.ts:78","errorMessage":"Invalid receiver","pc":[418]},{"teal":436,"source":"contracts\\LimitOrder.algo.ts:74","pc":[419,420,421]},{"teal":441,"source":"contracts\\LimitOrder.algo.ts:68","pc":[422,423]},{"teal":442,"source":"contracts\\LimitOrder.algo.ts:68","pc":[424]},{"teal":445,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[425]},{"teal":446,"source":"contracts\\LimitOrder.algo.ts:80","pc":[426,427]},{"teal":447,"source":"contracts\\LimitOrder.algo.ts:80","pc":[428,429]},{"teal":448,"source":"contracts\\LimitOrder.algo.ts:80","pc":[430,431,432]},{"teal":449,"source":"contracts\\LimitOrder.algo.ts:80","pc":[433]},{"teal":450,"source":"contracts\\LimitOrder.algo.ts:80","pc":[434,435]},{"teal":451,"source":"contracts\\LimitOrder.algo.ts:80","pc":[436,437]},{"teal":452,"source":"contracts\\LimitOrder.algo.ts:80","pc":[438]},{"teal":455,"source":"contracts\\LimitOrder.algo.ts:80","errorMessage":"Invalid giving asset","pc":[439]},{"teal":459,"source":"contracts\\LimitOrder.algo.ts:68","pc":[440,441]},{"teal":460,"source":"contracts\\LimitOrder.algo.ts:68","pc":[442]},{"teal":463,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[443]},{"teal":464,"source":"contracts\\LimitOrder.algo.ts:81","pc":[444,445]},{"teal":465,"source":"contracts\\LimitOrder.algo.ts:81","pc":[446,447]},{"teal":466,"source":"contracts\\LimitOrder.algo.ts:81","pc":[448,449,450]},{"teal":467,"source":"contracts\\LimitOrder.algo.ts:81","pc":[451]},{"teal":468,"source":"contracts\\LimitOrder.algo.ts:81","pc":[452,453]},{"teal":469,"source":"contracts\\LimitOrder.algo.ts:81","pc":[454,455]},{"teal":470,"source":"contracts\\LimitOrder.algo.ts:81","pc":[456]},{"teal":473,"source":"contracts\\LimitOrder.algo.ts:81","errorMessage":"Invalid giving amount","pc":[457]},{"teal":477,"source":"contracts\\LimitOrder.algo.ts:82","pc":[458,459]},{"teal":478,"source":"contracts\\LimitOrder.algo.ts:82","pc":[460,461]},{"teal":479,"source":"contracts\\LimitOrder.algo.ts:82","pc":[462,463]},{"teal":480,"source":"contracts\\LimitOrder.algo.ts:82","pc":[464]},{"teal":483,"source":"contracts\\LimitOrder.algo.ts:82","errorMessage":"Invalid sender","pc":[465]},{"teal":487,"source":"contracts\\LimitOrder.algo.ts:83","pc":[466,467]},{"teal":488,"source":"contracts\\LimitOrder.algo.ts:83","pc":[468,469]},{"teal":489,"source":"contracts\\LimitOrder.algo.ts:83","pc":[470,471]},{"teal":490,"source":"contracts\\LimitOrder.algo.ts:83","pc":[472]},{"teal":493,"source":"contracts\\LimitOrder.algo.ts:83","errorMessage":"Invalid receiver","pc":[473]},{"teal":498,"source":"contracts\\LimitOrder.algo.ts:85","pc":[474,475]},{"teal":499,"source":"contracts\\LimitOrder.algo.ts:85","pc":[476]},{"teal":500,"source":"contracts\\LimitOrder.algo.ts:85","pc":[477]},{"teal":503,"source":"contracts\\LimitOrder.algo.ts:85","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[478]},{"teal":504,"source":"contracts\\LimitOrder.algo.ts:85","pc":[479,480]},{"teal":505,"source":"contracts\\LimitOrder.algo.ts:85","pc":[481,482]},{"teal":506,"source":"contracts\\LimitOrder.algo.ts:85","pc":[483]},{"teal":507,"source":"contracts\\LimitOrder.algo.ts:85","pc":[484]},{"teal":508,"source":"contracts\\LimitOrder.algo.ts:85","pc":[485]},{"teal":509,"source":"contracts\\LimitOrder.algo.ts:85","pc":[486,487]},{"teal":510,"source":"contracts\\LimitOrder.algo.ts:85","pc":[488]},{"teal":511,"source":"contracts\\LimitOrder.algo.ts:85","pc":[489,490]},{"teal":512,"source":"contracts\\LimitOrder.algo.ts:85","pc":[491]},{"teal":516,"source":"contracts\\LimitOrder.algo.ts:86","pc":[492,493]},{"teal":517,"source":"contracts\\LimitOrder.algo.ts:68","pc":[494,495]},{"teal":518,"source":"contracts\\LimitOrder.algo.ts:68","pc":[496]},{"teal":521,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[497]},{"teal":522,"source":"contracts\\LimitOrder.algo.ts:86","pc":[498,499]},{"teal":523,"source":"contracts\\LimitOrder.algo.ts:86","pc":[500,501]},{"teal":524,"source":"contracts\\LimitOrder.algo.ts:86","pc":[502,503,504]},{"teal":525,"source":"contracts\\LimitOrder.algo.ts:86","pc":[505]},{"teal":526,"source":"contracts\\LimitOrder.algo.ts:68","pc":[506,507]},{"teal":527,"source":"contracts\\LimitOrder.algo.ts:68","pc":[508]},{"teal":530,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[509]},{"teal":531,"source":"contracts\\LimitOrder.algo.ts:86","pc":[510,511]},{"teal":532,"source":"contracts\\LimitOrder.algo.ts:86","pc":[512,513]},{"teal":533,"source":"contracts\\LimitOrder.algo.ts:86","pc":[514,515,516]},{"teal":534,"source":"contracts\\LimitOrder.algo.ts:86","pc":[517]},{"teal":535,"source":"contracts\\LimitOrder.algo.ts:86","pc":[518,519,520]},{"teal":540,"source":"contracts\\LimitOrder.algo.ts:68","pc":[521,522]},{"teal":541,"source":"contracts\\LimitOrder.algo.ts:68","pc":[523]},{"teal":544,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[524]},{"teal":545,"source":"contracts\\LimitOrder.algo.ts:87","pc":[525,526]},{"teal":546,"source":"contracts\\LimitOrder.algo.ts:87","pc":[527,528]},{"teal":547,"source":"contracts\\LimitOrder.algo.ts:87","pc":[529,530,531]},{"teal":548,"source":"contracts\\LimitOrder.algo.ts:87","pc":[532]},{"teal":549,"source":"contracts\\LimitOrder.algo.ts:87","pc":[533]},{"teal":550,"source":"contracts\\LimitOrder.algo.ts:87","pc":[534]},{"teal":551,"source":"contracts\\LimitOrder.algo.ts:87","pc":[535,536,537]},{"teal":556,"source":"contracts\\LimitOrder.algo.ts:68","pc":[538,539]},{"teal":557,"source":"contracts\\LimitOrder.algo.ts:68","pc":[540]},{"teal":560,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[541]},{"teal":561,"source":"contracts\\LimitOrder.algo.ts:88","pc":[542,543]},{"teal":562,"source":"contracts\\LimitOrder.algo.ts:88","pc":[544,545]},{"teal":563,"source":"contracts\\LimitOrder.algo.ts:88","pc":[546,547,548]},{"teal":564,"source":"contracts\\LimitOrder.algo.ts:88","pc":[549]},{"teal":565,"source":"contracts\\LimitOrder.algo.ts:88","pc":[550,551]},{"teal":570,"source":"contracts\\LimitOrder.algo.ts:68","pc":[552,553]},{"teal":571,"source":"contracts\\LimitOrder.algo.ts:68","pc":[554]},{"teal":574,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[555]},{"teal":575,"source":"contracts\\LimitOrder.algo.ts:89","pc":[556,557]},{"teal":576,"source":"contracts\\LimitOrder.algo.ts:89","pc":[558,559]},{"teal":577,"source":"contracts\\LimitOrder.algo.ts:89","pc":[560,561,562]},{"teal":578,"source":"contracts\\LimitOrder.algo.ts:89","pc":[563,564]},{"teal":579,"source":"contracts\\LimitOrder.algo.ts:89","pc":[565,566]},{"teal":580,"source":"contracts\\LimitOrder.algo.ts:89","pc":[567]},{"teal":581,"source":"contracts\\LimitOrder.algo.ts:89","pc":[568]},{"teal":582,"source":"contracts\\LimitOrder.algo.ts:89","pc":[569,570,571]},{"teal":587,"source":"contracts\\LimitOrder.algo.ts:90","pc":[572,573]},{"teal":588,"source":"contracts\\LimitOrder.algo.ts:90","pc":[574]},{"teal":589,"source":"contracts\\LimitOrder.algo.ts:90","pc":[575]},{"teal":592,"source":"contracts\\LimitOrder.algo.ts:90","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[576]},{"teal":593,"source":"contracts\\LimitOrder.algo.ts:90","pc":[577,578]},{"teal":594,"source":"contracts\\LimitOrder.algo.ts:90","pc":[579,580]},{"teal":595,"source":"contracts\\LimitOrder.algo.ts:90","pc":[581,582]},{"teal":596,"source":"contracts\\LimitOrder.algo.ts:90","pc":[583]},{"teal":597,"source":"contracts\\LimitOrder.algo.ts:90","pc":[584]},{"teal":598,"source":"contracts\\LimitOrder.algo.ts:90","pc":[585,586]},{"teal":599,"source":"contracts\\LimitOrder.algo.ts:90","pc":[587]},{"teal":600,"source":"contracts\\LimitOrder.algo.ts:90","pc":[588,589]},{"teal":601,"source":"contracts\\LimitOrder.algo.ts:90","pc":[590]},{"teal":605,"source":"contracts\\LimitOrder.algo.ts:68","pc":[591,592]},{"teal":606,"source":"contracts\\LimitOrder.algo.ts:68","pc":[593]},{"teal":609,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[594]},{"teal":610,"source":"contracts\\LimitOrder.algo.ts:91","pc":[595,596]},{"teal":611,"source":"contracts\\LimitOrder.algo.ts:91","pc":[597,598]},{"teal":612,"source":"contracts\\LimitOrder.algo.ts:91","pc":[599,600,601]},{"teal":613,"source":"contracts\\LimitOrder.algo.ts:68","pc":[602,603]},{"teal":614,"source":"contracts\\LimitOrder.algo.ts:68","pc":[604]},{"teal":617,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[605]},{"teal":618,"source":"contracts\\LimitOrder.algo.ts:91","pc":[606,607]},{"teal":619,"source":"contracts\\LimitOrder.algo.ts:91","pc":[608,609]},{"teal":620,"source":"contracts\\LimitOrder.algo.ts:91","pc":[610,611,612]},{"teal":621,"source":"contracts\\LimitOrder.algo.ts:91","pc":[613]},{"teal":622,"source":"contracts\\LimitOrder.algo.ts:68","pc":[614,615]},{"teal":623,"source":"contracts\\LimitOrder.algo.ts:68","pc":[616]},{"teal":626,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[617]},{"teal":627,"source":"contracts\\LimitOrder.algo.ts:91","pc":[618,619]},{"teal":628,"source":"contracts\\LimitOrder.algo.ts:91","pc":[620,621]},{"teal":629,"source":"contracts\\LimitOrder.algo.ts:91","pc":[622,623,624]},{"teal":630,"source":"contracts\\LimitOrder.algo.ts:91","pc":[625]},{"teal":631,"source":"contracts\\LimitOrder.algo.ts:91","pc":[626,627,628]},{"teal":634,"source":"contracts\\LimitOrder.algo.ts:87","pc":[629,630,631]},{"teal":639,"source":"contracts\\LimitOrder.algo.ts:94","pc":[632,633]},{"teal":640,"source":"contracts\\LimitOrder.algo.ts:94","pc":[634]},{"teal":641,"source":"contracts\\LimitOrder.algo.ts:94","pc":[635]},{"teal":644,"source":"contracts\\LimitOrder.algo.ts:94","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[636]},{"teal":645,"source":"contracts\\LimitOrder.algo.ts:94","pc":[637,638]},{"teal":646,"source":"contracts\\LimitOrder.algo.ts:94","pc":[639,640]},{"teal":647,"source":"contracts\\LimitOrder.algo.ts:94","pc":[641,642]},{"teal":648,"source":"contracts\\LimitOrder.algo.ts:94","pc":[643]},{"teal":649,"source":"contracts\\LimitOrder.algo.ts:94","pc":[644]},{"teal":650,"source":"contracts\\LimitOrder.algo.ts:94","pc":[645,646]},{"teal":651,"source":"contracts\\LimitOrder.algo.ts:94","pc":[647]},{"teal":652,"source":"contracts\\LimitOrder.algo.ts:94","pc":[648,649]},{"teal":653,"source":"contracts\\LimitOrder.algo.ts:94","pc":[650]},{"teal":657,"source":"contracts\\LimitOrder.algo.ts:68","pc":[651,652]},{"teal":658,"source":"contracts\\LimitOrder.algo.ts:68","pc":[653]},{"teal":661,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[654]},{"teal":662,"source":"contracts\\LimitOrder.algo.ts:95","pc":[655,656]},{"teal":663,"source":"contracts\\LimitOrder.algo.ts:95","pc":[657,658]},{"teal":664,"source":"contracts\\LimitOrder.algo.ts:95","pc":[659,660,661]},{"teal":665,"source":"contracts\\LimitOrder.algo.ts:68","pc":[662,663]},{"teal":666,"source":"contracts\\LimitOrder.algo.ts:68","pc":[664]},{"teal":669,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[665]},{"teal":670,"source":"contracts\\LimitOrder.algo.ts:95","pc":[666,667]},{"teal":671,"source":"contracts\\LimitOrder.algo.ts:95","pc":[668,669]},{"teal":672,"source":"contracts\\LimitOrder.algo.ts:95","pc":[670,671,672]},{"teal":673,"source":"contracts\\LimitOrder.algo.ts:95","pc":[673]},{"teal":674,"source":"contracts\\LimitOrder.algo.ts:68","pc":[674,675]},{"teal":675,"source":"contracts\\LimitOrder.algo.ts:68","pc":[676]},{"teal":678,"source":"contracts\\LimitOrder.algo.ts:68","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[677]},{"teal":679,"source":"contracts\\LimitOrder.algo.ts:95","pc":[678,679]},{"teal":680,"source":"contracts\\LimitOrder.algo.ts:95","pc":[680,681]},{"teal":681,"source":"contracts\\LimitOrder.algo.ts:95","pc":[682,683,684]},{"teal":682,"source":"contracts\\LimitOrder.algo.ts:95","pc":[685]},{"teal":683,"source":"contracts\\LimitOrder.algo.ts:95","pc":[686,687,688]},{"teal":686,"source":"contracts\\LimitOrder.algo.ts:66","pc":[689]},{"teal":691,"source":"contracts\\LimitOrder.algo.ts:99","pc":[690,691,692]},{"teal":692,"source":"contracts\\LimitOrder.algo.ts:99","pc":[693]},{"teal":695,"source":"contracts\\LimitOrder.algo.ts:99","pc":[694,695,696]},{"teal":696,"source":"contracts\\LimitOrder.algo.ts:99","pc":[697]},{"teal":697,"source":"contracts\\LimitOrder.algo.ts:99","pc":[698]},{"teal":701,"source":"contracts\\LimitOrder.algo.ts:99","pc":[699,700,701]},{"teal":704,"source":"contracts\\LimitOrder.algo.ts:99","pc":[702]},{"teal":708,"source":"contracts\\LimitOrder.algo.ts:100","pc":[703,704]},{"teal":709,"source":"contracts\\LimitOrder.algo.ts:100","pc":[705]},{"teal":710,"source":"contracts\\LimitOrder.algo.ts:100","pc":[706]},{"teal":711,"source":"contracts\\LimitOrder.algo.ts:100","pc":[707]},{"teal":712,"source":"contracts\\LimitOrder.algo.ts:100","pc":[708]},{"teal":715,"source":"contracts\\LimitOrder.algo.ts:100","errorMessage":"Order not found","pc":[709]},{"teal":719,"source":"contracts\\LimitOrder.algo.ts:101","pc":[710,711]},{"teal":720,"source":"contracts\\LimitOrder.algo.ts:101","pc":[712]},{"teal":721,"source":"contracts\\LimitOrder.algo.ts:101","pc":[713,714]},{"teal":725,"source":"contracts\\LimitOrder.algo.ts:101","pc":[715,716]},{"teal":726,"source":"contracts\\LimitOrder.algo.ts:101","pc":[717]},{"teal":729,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[718]},{"teal":730,"source":"contracts\\LimitOrder.algo.ts:102","pc":[719,720]},{"teal":731,"source":"contracts\\LimitOrder.algo.ts:102","pc":[721,722]},{"teal":732,"source":"contracts\\LimitOrder.algo.ts:102","pc":[723]},{"teal":733,"source":"contracts\\LimitOrder.algo.ts:102","pc":[724]},{"teal":736,"source":"contracts\\LimitOrder.algo.ts:102","errorMessage":"Order not completed","pc":[725]},{"teal":740,"source":"contracts\\LimitOrder.algo.ts:101","pc":[726,727]},{"teal":741,"source":"contracts\\LimitOrder.algo.ts:101","pc":[728]},{"teal":744,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[729]},{"teal":745,"source":"contracts\\LimitOrder.algo.ts:103","pc":[730,731]},{"teal":746,"source":"contracts\\LimitOrder.algo.ts:103","pc":[732,733]},{"teal":747,"source":"contracts\\LimitOrder.algo.ts:103","pc":[734,735]},{"teal":748,"source":"contracts\\LimitOrder.algo.ts:103","pc":[736]},{"teal":749,"source":"contracts\\LimitOrder.algo.ts:103","pc":[737]},{"teal":752,"source":"contracts\\LimitOrder.algo.ts:103","errorMessage":"Owner already claimed","pc":[738]},{"teal":756,"source":"contracts\\LimitOrder.algo.ts:104","pc":[739,740]},{"teal":757,"source":"contracts\\LimitOrder.algo.ts:101","pc":[741,742]},{"teal":758,"source":"contracts\\LimitOrder.algo.ts:101","pc":[743]},{"teal":761,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[744]},{"teal":762,"source":"contracts\\LimitOrder.algo.ts:104","pc":[745,746]},{"teal":763,"source":"contracts\\LimitOrder.algo.ts:104","pc":[747,748]},{"teal":764,"source":"contracts\\LimitOrder.algo.ts:104","pc":[749,750,751]},{"teal":765,"source":"contracts\\LimitOrder.algo.ts:104","pc":[752]},{"teal":768,"source":"contracts\\LimitOrder.algo.ts:104","errorMessage":"Invalid sender","pc":[753]},{"teal":781,"source":"contracts\\LimitOrder.algo.ts:105","pc":[754,755]},{"teal":782,"source":"contracts\\LimitOrder.algo.ts:105","pc":[756]},{"teal":783,"source":"contracts\\LimitOrder.algo.ts:101","pc":[757,758]},{"teal":784,"source":"contracts\\LimitOrder.algo.ts:101","pc":[759]},{"teal":787,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[760]},{"teal":788,"source":"contracts\\LimitOrder.algo.ts:106","pc":[761,762]},{"teal":789,"source":"contracts\\LimitOrder.algo.ts:106","pc":[763,764]},{"teal":790,"source":"contracts\\LimitOrder.algo.ts:106","pc":[765,766,767]},{"teal":791,"source":"contracts\\LimitOrder.algo.ts:106","pc":[768]},{"teal":792,"source":"contracts\\LimitOrder.algo.ts:106","pc":[769]},{"teal":793,"source":"contracts\\LimitOrder.algo.ts:101","pc":[770,771]},{"teal":794,"source":"contracts\\LimitOrder.algo.ts:101","pc":[772]},{"teal":797,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[773]},{"teal":798,"source":"contracts\\LimitOrder.algo.ts:107","pc":[774,775]},{"teal":799,"source":"contracts\\LimitOrder.algo.ts:107","pc":[776,777]},{"teal":800,"source":"contracts\\LimitOrder.algo.ts:107","pc":[778,779,780]},{"teal":801,"source":"contracts\\LimitOrder.algo.ts:107","pc":[781]},{"teal":802,"source":"contracts\\LimitOrder.algo.ts:101","pc":[782,783]},{"teal":803,"source":"contracts\\LimitOrder.algo.ts:101","pc":[784]},{"teal":806,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[785]},{"teal":807,"source":"contracts\\LimitOrder.algo.ts:108","pc":[786,787]},{"teal":808,"source":"contracts\\LimitOrder.algo.ts:108","pc":[788,789]},{"teal":809,"source":"contracts\\LimitOrder.algo.ts:108","pc":[790,791,792]},{"teal":810,"source":"contracts\\LimitOrder.algo.ts:108","pc":[793]},{"teal":811,"source":"contracts\\LimitOrder.algo.ts:108","pc":[794]},{"teal":812,"source":"contracts\\LimitOrder.algo.ts:108","pc":[795]},{"teal":813,"source":"contracts\\LimitOrder.algo.ts:101","pc":[796,797]},{"teal":814,"source":"contracts\\LimitOrder.algo.ts:101","pc":[798]},{"teal":817,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[799]},{"teal":818,"source":"contracts\\LimitOrder.algo.ts:109","pc":[800,801]},{"teal":819,"source":"contracts\\LimitOrder.algo.ts:109","pc":[802,803]},{"teal":820,"source":"contracts\\LimitOrder.algo.ts:109","pc":[804,805,806]},{"teal":821,"source":"contracts\\LimitOrder.algo.ts:109","pc":[807]},{"teal":822,"source":"contracts\\LimitOrder.algo.ts:109","pc":[808]},{"teal":823,"source":"contracts\\LimitOrder.algo.ts:109","pc":[809]},{"teal":824,"source":"contracts\\LimitOrder.algo.ts:101","pc":[810,811]},{"teal":825,"source":"contracts\\LimitOrder.algo.ts:101","pc":[812]},{"teal":828,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[813]},{"teal":829,"source":"contracts\\LimitOrder.algo.ts:110","pc":[814,815]},{"teal":830,"source":"contracts\\LimitOrder.algo.ts:110","pc":[816,817]},{"teal":831,"source":"contracts\\LimitOrder.algo.ts:110","pc":[818,819,820]},{"teal":832,"source":"contracts\\LimitOrder.algo.ts:110","pc":[821]},{"teal":833,"source":"contracts\\LimitOrder.algo.ts:110","pc":[822]},{"teal":834,"source":"contracts\\LimitOrder.algo.ts:110","pc":[823]},{"teal":835,"source":"contracts\\LimitOrder.algo.ts:101","pc":[824,825]},{"teal":836,"source":"contracts\\LimitOrder.algo.ts:101","pc":[826]},{"teal":839,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[827]},{"teal":840,"source":"contracts\\LimitOrder.algo.ts:111","pc":[828,829]},{"teal":841,"source":"contracts\\LimitOrder.algo.ts:111","pc":[830,831]},{"teal":842,"source":"contracts\\LimitOrder.algo.ts:111","pc":[832,833,834]},{"teal":843,"source":"contracts\\LimitOrder.algo.ts:111","pc":[835]},{"teal":844,"source":"contracts\\LimitOrder.algo.ts:111","pc":[836]},{"teal":845,"source":"contracts\\LimitOrder.algo.ts:111","pc":[837]},{"teal":846,"source":"contracts\\LimitOrder.algo.ts:112","pc":[838]},{"teal":847,"source":"contracts\\LimitOrder.algo.ts:112","pc":[839]},{"teal":848,"source":"contracts\\LimitOrder.algo.ts:101","pc":[840,841]},{"teal":849,"source":"contracts\\LimitOrder.algo.ts:101","pc":[842]},{"teal":852,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[843]},{"teal":853,"source":"contracts\\LimitOrder.algo.ts:112","pc":[844,845]},{"teal":854,"source":"contracts\\LimitOrder.algo.ts:112","pc":[846,847]},{"teal":855,"source":"contracts\\LimitOrder.algo.ts:112","pc":[848]},{"teal":856,"source":"contracts\\LimitOrder.algo.ts:112","pc":[849]},{"teal":857,"source":"contracts\\LimitOrder.algo.ts:112","pc":[850]},{"teal":858,"source":"contracts\\LimitOrder.algo.ts:113","pc":[851]},{"teal":859,"source":"contracts\\LimitOrder.algo.ts:113","pc":[852]},{"teal":860,"source":"contracts\\LimitOrder.algo.ts:113","pc":[853]},{"teal":861,"source":"contracts\\LimitOrder.algo.ts:105","pc":[854]},{"teal":862,"source":"contracts\\LimitOrder.algo.ts:105","pc":[855]},{"teal":866,"source":"contracts\\LimitOrder.algo.ts:101","pc":[856,857]},{"teal":867,"source":"contracts\\LimitOrder.algo.ts:101","pc":[858]},{"teal":870,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[859]},{"teal":871,"source":"contracts\\LimitOrder.algo.ts:115","pc":[860,861]},{"teal":872,"source":"contracts\\LimitOrder.algo.ts:115","pc":[862,863]},{"teal":873,"source":"contracts\\LimitOrder.algo.ts:115","pc":[864,865,866]},{"teal":874,"source":"contracts\\LimitOrder.algo.ts:101","pc":[867,868]},{"teal":875,"source":"contracts\\LimitOrder.algo.ts:101","pc":[869]},{"teal":878,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[870]},{"teal":879,"source":"contracts\\LimitOrder.algo.ts:115","pc":[871,872]},{"teal":880,"source":"contracts\\LimitOrder.algo.ts:115","pc":[873,874]},{"teal":881,"source":"contracts\\LimitOrder.algo.ts:115","pc":[875,876,877]},{"teal":882,"source":"contracts\\LimitOrder.algo.ts:115","pc":[878]},{"teal":883,"source":"contracts\\LimitOrder.algo.ts:101","pc":[879,880]},{"teal":884,"source":"contracts\\LimitOrder.algo.ts:101","pc":[881]},{"teal":887,"source":"contracts\\LimitOrder.algo.ts:101","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[882]},{"teal":888,"source":"contracts\\LimitOrder.algo.ts:115","pc":[883,884]},{"teal":889,"source":"contracts\\LimitOrder.algo.ts:115","pc":[885,886]},{"teal":890,"source":"contracts\\LimitOrder.algo.ts:115","pc":[887,888,889]},{"teal":891,"source":"contracts\\LimitOrder.algo.ts:115","pc":[890]},{"teal":892,"source":"contracts\\LimitOrder.algo.ts:115","pc":[891,892,893]},{"teal":893,"source":"contracts\\LimitOrder.algo.ts:99","pc":[894]},{"teal":898,"source":"contracts\\LimitOrder.algo.ts:118","pc":[895,896]},{"teal":899,"source":"contracts\\LimitOrder.algo.ts:118","pc":[897]},{"teal":900,"source":"contracts\\LimitOrder.algo.ts:118","pc":[898]},{"teal":901,"source":"contracts\\LimitOrder.algo.ts:118","pc":[899]},{"teal":902,"source":"contracts\\LimitOrder.algo.ts:118","pc":[900,901]},{"teal":903,"source":"contracts\\LimitOrder.algo.ts:118","pc":[902]},{"teal":904,"source":"contracts\\LimitOrder.algo.ts:118","pc":[903]},{"teal":907,"source":"contracts\\LimitOrder.algo.ts:118","errorMessage":"argument 0 (mbrTxn) for optInToAsset must be a pay transaction","pc":[904]},{"teal":910,"source":"contracts\\LimitOrder.algo.ts:118","pc":[905,906,907]},{"teal":911,"source":"contracts\\LimitOrder.algo.ts:118","pc":[908]},{"teal":914,"source":"contracts\\LimitOrder.algo.ts:118","pc":[909,910,911]},{"teal":915,"source":"contracts\\LimitOrder.algo.ts:118","pc":[912]},{"teal":916,"source":"contracts\\LimitOrder.algo.ts:118","pc":[913]},{"teal":920,"source":"contracts\\LimitOrder.algo.ts:118","pc":[914,915,916]},{"teal":924,"source":"contracts\\LimitOrder.algo.ts:119","pc":[917,918]},{"teal":925,"source":"contracts\\LimitOrder.algo.ts:119","pc":[919,920]},{"teal":926,"source":"contracts\\LimitOrder.algo.ts:119","pc":[921,922]},{"teal":927,"source":"contracts\\LimitOrder.algo.ts:119","pc":[923]},{"teal":928,"source":"contracts\\LimitOrder.algo.ts:119","pc":[924]},{"teal":929,"source":"contracts\\LimitOrder.algo.ts:119","pc":[925]},{"teal":932,"source":"contracts\\LimitOrder.algo.ts:119","errorMessage":"Already opted in","pc":[926]},{"teal":937,"source":"contracts\\LimitOrder.algo.ts:120","pc":[927,928]},{"teal":938,"source":"contracts\\LimitOrder.algo.ts:120","pc":[929,930]},{"teal":939,"source":"contracts\\LimitOrder.algo.ts:120","pc":[931,932]},{"teal":940,"source":"contracts\\LimitOrder.algo.ts:120","pc":[933]},{"teal":943,"source":"contracts\\LimitOrder.algo.ts:120","errorMessage":"transaction verification failed: {\"txn\":\"mbrTxn\",\"field\":\"amount\",\"condition\":\"greaterThanEqualTo\",\"expected\":\">=globals.assetOptInMinBalance\"}","pc":[934]},{"teal":947,"source":"contracts\\LimitOrder.algo.ts:121","pc":[935]},{"teal":948,"source":"contracts\\LimitOrder.algo.ts:121","pc":[936]},{"teal":949,"source":"contracts\\LimitOrder.algo.ts:121","pc":[937,938]},{"teal":953,"source":"contracts\\LimitOrder.algo.ts:121","pc":[939,940]},{"teal":954,"source":"contracts\\LimitOrder.algo.ts:121","pc":[941,942]},{"teal":958,"source":"contracts\\LimitOrder.algo.ts:121","pc":[943,944]},{"teal":959,"source":"contracts\\LimitOrder.algo.ts:121","pc":[945,946]},{"teal":963,"source":"contracts\\LimitOrder.algo.ts:121","pc":[947]},{"teal":964,"source":"contracts\\LimitOrder.algo.ts:121","pc":[948,949]},{"teal":967,"source":"contracts\\LimitOrder.algo.ts:121","pc":[950]},{"teal":968,"source":"contracts\\LimitOrder.algo.ts:121","pc":[951,952]},{"teal":971,"source":"contracts\\LimitOrder.algo.ts:121","pc":[953]},{"teal":972,"source":"contracts\\LimitOrder.algo.ts:118","pc":[954]},{"teal":977,"source":"contracts\\LimitOrder.algo.ts:124","pc":[955,956,957]},{"teal":978,"source":"contracts\\LimitOrder.algo.ts:124","pc":[958]},{"teal":981,"source":"contracts\\LimitOrder.algo.ts:124","pc":[959,960,961]},{"teal":982,"source":"contracts\\LimitOrder.algo.ts:124","pc":[962]},{"teal":983,"source":"contracts\\LimitOrder.algo.ts:124","pc":[963]},{"teal":987,"source":"contracts\\LimitOrder.algo.ts:124","pc":[964,965,966]},{"teal":990,"source":"contracts\\LimitOrder.algo.ts:124","pc":[967]},{"teal":994,"source":"contracts\\LimitOrder.algo.ts:125","pc":[968,969]},{"teal":995,"source":"contracts\\LimitOrder.algo.ts:125","pc":[970]},{"teal":996,"source":"contracts\\LimitOrder.algo.ts:125","pc":[971]},{"teal":997,"source":"contracts\\LimitOrder.algo.ts:125","pc":[972]},{"teal":998,"source":"contracts\\LimitOrder.algo.ts:125","pc":[973]},{"teal":1001,"source":"contracts\\LimitOrder.algo.ts:125","errorMessage":"Order not found","pc":[974]},{"teal":1005,"source":"contracts\\LimitOrder.algo.ts:126","pc":[975,976]},{"teal":1006,"source":"contracts\\LimitOrder.algo.ts:126","pc":[977]},{"teal":1007,"source":"contracts\\LimitOrder.algo.ts:126","pc":[978,979]},{"teal":1011,"source":"contracts\\LimitOrder.algo.ts:126","pc":[980,981]},{"teal":1012,"source":"contracts\\LimitOrder.algo.ts:126","pc":[982]},{"teal":1015,"source":"contracts\\LimitOrder.algo.ts:126","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[983]},{"teal":1016,"source":"contracts\\LimitOrder.algo.ts:127","pc":[984,985]},{"teal":1017,"source":"contracts\\LimitOrder.algo.ts:127","pc":[986,987]},{"teal":1018,"source":"contracts\\LimitOrder.algo.ts:127","pc":[988,989,990]},{"teal":1019,"source":"contracts\\LimitOrder.algo.ts:127","pc":[991,992]},{"teal":1020,"source":"contracts\\LimitOrder.algo.ts:127","pc":[993]},{"teal":1023,"source":"contracts\\LimitOrder.algo.ts:127","errorMessage":"Invalid sender","pc":[994]},{"teal":1027,"source":"contracts\\LimitOrder.algo.ts:126","pc":[995,996]},{"teal":1028,"source":"contracts\\LimitOrder.algo.ts:126","pc":[997]},{"teal":1031,"source":"contracts\\LimitOrder.algo.ts:126","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[998]},{"teal":1032,"source":"contracts\\LimitOrder.algo.ts:128","pc":[999,1000]},{"teal":1033,"source":"contracts\\LimitOrder.algo.ts:128","pc":[1001,1002]},{"teal":1034,"source":"contracts\\LimitOrder.algo.ts:128","pc":[1003]},{"teal":1035,"source":"contracts\\LimitOrder.algo.ts:128","pc":[1004]},{"teal":1036,"source":"contracts\\LimitOrder.algo.ts:128","pc":[1005]},{"teal":1039,"source":"contracts\\LimitOrder.algo.ts:128","errorMessage":"Order already completed","pc":[1006]},{"teal":1043,"source":"contracts\\LimitOrder.algo.ts:129","pc":[1007,1008]},{"teal":1044,"source":"contracts\\LimitOrder.algo.ts:129","pc":[1009]},{"teal":1045,"source":"contracts\\LimitOrder.algo.ts:129","pc":[1010]},{"teal":1049,"source":"contracts\\LimitOrder.algo.ts:130","pc":[1011,1012]},{"teal":1050,"source":"contracts\\LimitOrder.algo.ts:126","pc":[1013,1014]},{"teal":1051,"source":"contracts\\LimitOrder.algo.ts:126","pc":[1015]},{"teal":1054,"source":"contracts\\LimitOrder.algo.ts:126","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[1016]},{"teal":1055,"source":"contracts\\LimitOrder.algo.ts:130","pc":[1017,1018]},{"teal":1056,"source":"contracts\\LimitOrder.algo.ts:130","pc":[1019,1020]},{"teal":1057,"source":"contracts\\LimitOrder.algo.ts:130","pc":[1021,1022,1023]},{"teal":1058,"source":"contracts\\LimitOrder.algo.ts:130","pc":[1024]},{"teal":1059,"source":"contracts\\LimitOrder.algo.ts:126","pc":[1025,1026]},{"teal":1060,"source":"contracts\\LimitOrder.algo.ts:126","pc":[1027]},{"teal":1063,"source":"contracts\\LimitOrder.algo.ts:126","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[1028]},{"teal":1064,"source":"contracts\\LimitOrder.algo.ts:130","pc":[1029,1030]},{"teal":1065,"source":"contracts\\LimitOrder.algo.ts:130","pc":[1031,1032]},{"teal":1066,"source":"contracts\\LimitOrder.algo.ts:130","pc":[1033,1034,1035]},{"teal":1067,"source":"contracts\\LimitOrder.algo.ts:130","pc":[1036]},{"teal":1068,"source":"contracts\\LimitOrder.algo.ts:130","pc":[1037,1038,1039]},{"teal":1072,"source":"contracts\\LimitOrder.algo.ts:131","pc":[1040]},{"teal":1073,"source":"contracts\\LimitOrder.algo.ts:131","pc":[1041]},{"teal":1074,"source":"contracts\\LimitOrder.algo.ts:131","pc":[1042,1043]},{"teal":1078,"source":"contracts\\LimitOrder.algo.ts:126","pc":[1044,1045]},{"teal":1079,"source":"contracts\\LimitOrder.algo.ts:126","pc":[1046]},{"teal":1082,"source":"contracts\\LimitOrder.algo.ts:126","errorMessage":"box value does not exist: this.orders(orderId).value","pc":[1047]},{"teal":1083,"source":"contracts\\LimitOrder.algo.ts:131","pc":[1048,1049]},{"teal":1084,"source":"contracts\\LimitOrder.algo.ts:131","pc":[1050,1051]},{"teal":1085,"source":"contracts\\LimitOrder.algo.ts:131","pc":[1052,1053,1054]},{"teal":1086,"source":"contracts\\LimitOrder.algo.ts:131","pc":[1055,1056]},{"teal":1090,"source":"contracts\\LimitOrder.algo.ts:131","pc":[1057,1058]},{"teal":1091,"source":"contracts\\LimitOrder.algo.ts:131","pc":[1059,1060]},{"teal":1094,"source":"contracts\\LimitOrder.algo.ts:131","pc":[1061]},{"teal":1095,"source":"contracts\\LimitOrder.algo.ts:131","pc":[1062,1063]},{"teal":1098,"source":"contracts\\LimitOrder.algo.ts:131","pc":[1064]},{"teal":1099,"source":"contracts\\LimitOrder.algo.ts:124","pc":[1065]},{"teal":1103,"source":"contracts\\LimitOrder.algo.ts:134","pc":[1066,1067,1068]},{"teal":1108,"source":"contracts\\LimitOrder.algo.ts:135","pc":[1069,1070]},{"teal":1109,"source":"contracts\\LimitOrder.algo.ts:135","pc":[1071]},{"teal":1110,"source":"contracts\\LimitOrder.algo.ts:135","pc":[1072]},{"teal":1111,"source":"contracts\\LimitOrder.algo.ts:135","pc":[1073,1074,1075]},{"teal":1116,"source":"contracts\\LimitOrder.algo.ts:136","pc":[1076]},{"teal":1117,"source":"contracts\\LimitOrder.algo.ts:136","pc":[1077]},{"teal":1118,"source":"contracts\\LimitOrder.algo.ts:136","pc":[1078,1079]},{"teal":1122,"source":"contracts\\LimitOrder.algo.ts:136","pc":[1080,1081]},{"teal":1123,"source":"contracts\\LimitOrder.algo.ts:136","pc":[1082,1083]},{"teal":1127,"source":"contracts\\LimitOrder.algo.ts:136","pc":[1084,1085]},{"teal":1128,"source":"contracts\\LimitOrder.algo.ts:136","pc":[1086,1087]},{"teal":1131,"source":"contracts\\LimitOrder.algo.ts:136","pc":[1088]},{"teal":1132,"source":"contracts\\LimitOrder.algo.ts:136","pc":[1089,1090]},{"teal":1135,"source":"contracts\\LimitOrder.algo.ts:136","pc":[1091]},{"teal":1136,"source":"contracts\\LimitOrder.algo.ts:135","pc":[1092,1093,1094]},{"teal":1145,"source":"contracts\\LimitOrder.algo.ts:138","pc":[1095]},{"teal":1146,"source":"contracts\\LimitOrder.algo.ts:138","pc":[1096]},{"teal":1147,"source":"contracts\\LimitOrder.algo.ts:138","pc":[1097,1098]},{"teal":1151,"source":"contracts\\LimitOrder.algo.ts:139","pc":[1099,1100]},{"teal":1152,"source":"contracts\\LimitOrder.algo.ts:139","pc":[1101,1102]},{"teal":1156,"source":"contracts\\LimitOrder.algo.ts:140","pc":[1103,1104]},{"teal":1157,"source":"contracts\\LimitOrder.algo.ts:140","pc":[1105,1106]},{"teal":1161,"source":"contracts\\LimitOrder.algo.ts:141","pc":[1107,1108]},{"teal":1162,"source":"contracts\\LimitOrder.algo.ts:141","pc":[1109,1110]},{"teal":1165,"source":"contracts\\LimitOrder.algo.ts:138","pc":[1111]},{"teal":1166,"source":"contracts\\LimitOrder.algo.ts:138","pc":[1112,1113]},{"teal":1169,"source":"contracts\\LimitOrder.algo.ts:138","pc":[1114]},{"teal":1172,"source":"contracts\\LimitOrder.algo.ts:134","pc":[1115]},{"teal":1175,"source":"contracts\\LimitOrder.algo.ts:16","pc":[1116,1117,1118,1119,1120,1121]},{"teal":1176,"source":"contracts\\LimitOrder.algo.ts:16","pc":[1122,1123,1124]},{"teal":1177,"source":"contracts\\LimitOrder.algo.ts:16","pc":[1125,1126,1127,1128]},{"teal":1180,"source":"contracts\\LimitOrder.algo.ts:16","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1129]},{"teal":1183,"source":"contracts\\LimitOrder.algo.ts:16","pc":[1130,1131,1132,1133,1134,1135]},{"teal":1184,"source":"contracts\\LimitOrder.algo.ts:16","pc":[1136,1137,1138,1139,1140,1141]},{"teal":1185,"source":"contracts\\LimitOrder.algo.ts:16","pc":[1142,1143,1144,1145,1146,1147]},{"teal":1186,"source":"contracts\\LimitOrder.algo.ts:16","pc":[1148,1149,1150,1151,1152,1153]},{"teal":1187,"source":"contracts\\LimitOrder.algo.ts:16","pc":[1154,1155,1156,1157,1158,1159]},{"teal":1188,"source":"contracts\\LimitOrder.algo.ts:16","pc":[1160,1161,1162]},{"teal":1189,"source":"contracts\\LimitOrder.algo.ts:16","pc":[1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174]},{"teal":1192,"source":"contracts\\LimitOrder.algo.ts:16","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1175]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAGAQDABATBBOSTAiYDCm9yZGVySW5kZXgAAQAxGBSBBgsxGQiNDAQqAAAAAAAAAAAAAAQcAAAAAAAAAAAAAACIAAIiQ4oAACgjZ4mABBUffHU2GgIXNhoBFzEWIglJOBAiEkQxFoECCYgABRZQsCJDigQBKTEAi/1wAExIRIv/OAAxABJEi/yL/Yv/iAAkjACL/jgIIQUPRChkFosAvyhkIggoTGeLADX/NP9XAAgXjACJigMBi/84ECUSSUAAB4v/OBAiEhFEi/84ECISQQAwi/84BzIKEkQoZBYxAFCACAAAAAAAAAAAUIv+FlCL/zgIFlCL/RZQKiNJVCIjVFCJi/84FDIKEkQoZBYxAFCL/zgRFlCL/hZQi/84EhZQi/0WUCojSVQiI1RQiTEWIgk2GgEXiAACIkOKAgApSYv/Fr1MSESL/xaMAIsAvkQ1/zT/JFMURIv+OBAlEklAAAeL/jgQIhIRRIv+OBAiEkEANIsAvkQ1/zT/VzAIFyMSRIsAvkQ1/zT/V0AIF4v+OAgSRDEAi/44ABJEMgqL/jgHEkRCADSLAL5ENf80/1cwCBeL/jgREkSLAL5ENf80/1dACBeL/jgSEkQxAIv+OBMSRDIKi/44FBJEi/8WvkQ1/zT/JCJUi/8WTgK7MQCLAL5ENf80/1c4CBeLAL5ENf80/1coCBeIAiGLAL5ENf80/1cwCBcjE0EAXosAvkQ1/zT/VzAIF4wBiwC+RDX/NP9XCCCLAXAATEhBADmL/xa+RDX/NP8hBCJUi/8WTgK7iwC+RDX/NP9XCCCLAL5ENf80/1dACBeLAL5ENf80/1cwCBeIAbVCADmL/xa+RDX/NP8hBCJUi/8WTgK7iwC+RDX/NP9XCCCLAL5ENf80/1dACBeLAL5ENf80/1cwCBeIAXmJNhoBF4gAAiJDigEAKYv/Fr1MSESL/xaMAIsAvkQ1/zT/JFNEiwC+RDX/NP8hBFMURDEAiwC+RDX/NP9XCCASRIv/FosAvkQ1/zT/VwAIFxaLAL5ENf80/1cIIFCLAL5ENf80/1coCBcWUIsAvkQ1/zT/VzAIFxZQiwC+RDX/NP9XOAgXFlCLAL5ENf80/1dACBcWUCojiwC+RDX/NP8kU1QiSVRQv4sAvkQ1/zT/VwggiwC+RDX/NP9XQAgXiwC+RDX/NP9XMAgXiACsiTEWIglJOBAiEkQ2GgEXiAACIkOKAgAyCov/cABMSBREi/44CDIQD0SxJbIQi/+yETIKshQjshIjsgGziTYaAReIAAIiQ4oBACmL/xa9TEhEi/8WjACLAL5ENf80/1cIIDEAEkSLAL5ENf80/yRTFESL/xa8MQCLAL5ENf80/1c4CBeLAL5ENf80/1coCBeIABqxIrIQiwC+RDX/NP9XCCCyByEFsggjsgGziYoDAIv/IxJBABOxIrIQi/2yB4v+sggjsgGzQgAUsSWyEIv9shSL/rISi/+yESOyAbOJgAS4RHs2NhoAjgH72ACABCokMd2ABAp4HimABJzdF6aABFwBKYmABDTfw+02GgCOBfu2/Jb+G/7o/yQA","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":23,"patch":1,"commitHash":"34171a94"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Order = {
  id: bigint,
  owner: string,
  givingAsset: bigint,
  takingAsset: bigint,
  givingAmount: bigint,
  takingAmount: bigint,
  completed: boolean,
  ownerClaimed: boolean
}


/**
 * Converts the ABI tuple representation of a Order to the struct representation
 */
export function OrderFromTuple(abiTuple: [bigint, string, bigint, bigint, bigint, bigint, boolean, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Order, APP_SPEC.structs) as Order
}

/**
 * The argument types for the LimitOrder contract
 */
export type LimitOrderArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'createOrder(txn,pay,uint64,uint64)uint64': {
      assetSendTxn: AppMethodCallTransactionArgument
      mbrTxn: AppMethodCallTransactionArgument
      takingAsset: bigint | number
      takingAmount: bigint | number
    }
    'claimOrder(uint64,txn)void': {
      orderId: bigint | number
      assetSendTxn: AppMethodCallTransactionArgument
    }
    'claimOwnerAsset(uint64)void': {
      orderId: bigint | number
    }
    'optInToAsset(uint64,pay)void': {
      assetId: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'cancelOrder(uint64)void': {
      orderId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'createOrder(txn,pay,uint64,uint64)uint64': [assetSendTxn: AppMethodCallTransactionArgument, mbrTxn: AppMethodCallTransactionArgument, takingAsset: bigint | number, takingAmount: bigint | number]
    'claimOrder(uint64,txn)void': [orderId: bigint | number, assetSendTxn: AppMethodCallTransactionArgument]
    'claimOwnerAsset(uint64)void': [orderId: bigint | number]
    'optInToAsset(uint64,pay)void': [assetId: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'cancelOrder(uint64)void': [orderId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type LimitOrderReturns = {
  'createApplication()void': void
  'createOrder(txn,pay,uint64,uint64)uint64': bigint
  'claimOrder(uint64,txn)void': void
  'claimOwnerAsset(uint64)void': void
  'optInToAsset(uint64,pay)void': void
  'cancelOrder(uint64)void': void
}

/**
 * Defines the types of available calls and state of the LimitOrder smart contract.
 */
export type LimitOrderTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: LimitOrderArgs['obj']['createApplication()void']
      argsTuple: LimitOrderArgs['tuple']['createApplication()void']
      returns: LimitOrderReturns['createApplication()void']
    }>
    & Record<'createOrder(txn,pay,uint64,uint64)uint64' | 'createOrder', {
      argsObj: LimitOrderArgs['obj']['createOrder(txn,pay,uint64,uint64)uint64']
      argsTuple: LimitOrderArgs['tuple']['createOrder(txn,pay,uint64,uint64)uint64']
      returns: LimitOrderReturns['createOrder(txn,pay,uint64,uint64)uint64']
    }>
    & Record<'claimOrder(uint64,txn)void' | 'claimOrder', {
      argsObj: LimitOrderArgs['obj']['claimOrder(uint64,txn)void']
      argsTuple: LimitOrderArgs['tuple']['claimOrder(uint64,txn)void']
      returns: LimitOrderReturns['claimOrder(uint64,txn)void']
    }>
    & Record<'claimOwnerAsset(uint64)void' | 'claimOwnerAsset', {
      argsObj: LimitOrderArgs['obj']['claimOwnerAsset(uint64)void']
      argsTuple: LimitOrderArgs['tuple']['claimOwnerAsset(uint64)void']
      returns: LimitOrderReturns['claimOwnerAsset(uint64)void']
    }>
    & Record<'optInToAsset(uint64,pay)void' | 'optInToAsset', {
      argsObj: LimitOrderArgs['obj']['optInToAsset(uint64,pay)void']
      argsTuple: LimitOrderArgs['tuple']['optInToAsset(uint64,pay)void']
      returns: LimitOrderReturns['optInToAsset(uint64,pay)void']
    }>
    & Record<'cancelOrder(uint64)void' | 'cancelOrder', {
      argsObj: LimitOrderArgs['obj']['cancelOrder(uint64)void']
      argsTuple: LimitOrderArgs['tuple']['cancelOrder(uint64)void']
      returns: LimitOrderReturns['cancelOrder(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        orderIndex: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        orders: Map<bigint | number, Order>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type LimitOrderSignatures = keyof LimitOrderTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LimitOrderNonVoidMethodSignatures = keyof LimitOrderTypes['methods'] extends infer T ? T extends keyof LimitOrderTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the LimitOrder smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LimitOrderSignatures> = LimitOrderTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LimitOrder smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LimitOrderSignatures> = LimitOrderTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = LimitOrderTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = LimitOrderTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type LimitOrderCreateCallParams =
  | Expand<CallParams<LimitOrderArgs['obj']['createApplication()void'] | LimitOrderArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<LimitOrderArgs['obj']['createApplication()void'] | LimitOrderArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type LimitOrderDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LimitOrderCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the LimitOrder smart contract
 */
export abstract class LimitOrderParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends LimitOrderCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return LimitOrderParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the LimitOrder smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<LimitOrderArgs['obj']['createApplication()void'] | LimitOrderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createOrder(txn,pay,uint64,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createOrder(params: CallParams<LimitOrderArgs['obj']['createOrder(txn,pay,uint64,uint64)uint64'] | LimitOrderArgs['tuple']['createOrder(txn,pay,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createOrder(txn,pay,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetSendTxn, params.args.mbrTxn, params.args.takingAsset, params.args.takingAmount],
    }
  }
  /**
   * Constructs a no op call for the claimOrder(uint64,txn)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimOrder(params: CallParams<LimitOrderArgs['obj']['claimOrder(uint64,txn)void'] | LimitOrderArgs['tuple']['claimOrder(uint64,txn)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimOrder(uint64,txn)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.orderId, params.args.assetSendTxn],
    }
  }
  /**
   * Constructs a no op call for the claimOwnerAsset(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimOwnerAsset(params: CallParams<LimitOrderArgs['obj']['claimOwnerAsset(uint64)void'] | LimitOrderArgs['tuple']['claimOwnerAsset(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimOwnerAsset(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.orderId],
    }
  }
  /**
   * Constructs a no op call for the optInToAsset(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<LimitOrderArgs['obj']['optInToAsset(uint64,pay)void'] | LimitOrderArgs['tuple']['optInToAsset(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToAsset(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the cancelOrder(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cancelOrder(params: CallParams<LimitOrderArgs['obj']['cancelOrder(uint64)void'] | LimitOrderArgs['tuple']['cancelOrder(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cancelOrder(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.orderId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the LimitOrder smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LimitOrderFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LimitOrderFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LimitOrderClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LimitOrderClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the LimitOrder smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LimitOrderDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? LimitOrderParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (LimitOrderCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new LimitOrderClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LimitOrder smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<LimitOrderArgs['obj']['createApplication()void'] | LimitOrderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(LimitOrderParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LimitOrder smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<LimitOrderArgs['obj']['createApplication()void'] | LimitOrderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(LimitOrderParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LimitOrder smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<LimitOrderArgs['obj']['createApplication()void'] | LimitOrderArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(LimitOrderParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | LimitOrderReturns['createApplication()void']) }, appClient: new LimitOrderClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the LimitOrder smart contract
 */
export class LimitOrderClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LimitOrderClient`
   *
   * @param appClient An `AppClient` instance which has been created with the LimitOrder app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LimitOrderClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LimitOrderNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `LimitOrderClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LimitOrderClient> {
    return new LimitOrderClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `LimitOrderClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LimitOrderClient> {
    return new LimitOrderClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the LimitOrder smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `createOrder(txn,pay,uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createOrder: (params: CallParams<LimitOrderArgs['obj']['createOrder(txn,pay,uint64,uint64)uint64'] | LimitOrderArgs['tuple']['createOrder(txn,pay,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LimitOrderParamsFactory.createOrder(params))
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `claimOrder(uint64,txn)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimOrder: (params: CallParams<LimitOrderArgs['obj']['claimOrder(uint64,txn)void'] | LimitOrderArgs['tuple']['claimOrder(uint64,txn)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LimitOrderParamsFactory.claimOrder(params))
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `claimOwnerAsset(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimOwnerAsset: (params: CallParams<LimitOrderArgs['obj']['claimOwnerAsset(uint64)void'] | LimitOrderArgs['tuple']['claimOwnerAsset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LimitOrderParamsFactory.claimOwnerAsset(params))
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `optInToAsset(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<LimitOrderArgs['obj']['optInToAsset(uint64,pay)void'] | LimitOrderArgs['tuple']['optInToAsset(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LimitOrderParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `cancelOrder(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cancelOrder: (params: CallParams<LimitOrderArgs['obj']['cancelOrder(uint64)void'] | LimitOrderArgs['tuple']['cancelOrder(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LimitOrderParamsFactory.cancelOrder(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the LimitOrder smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `createOrder(txn,pay,uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createOrder: (params: CallParams<LimitOrderArgs['obj']['createOrder(txn,pay,uint64,uint64)uint64'] | LimitOrderArgs['tuple']['createOrder(txn,pay,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LimitOrderParamsFactory.createOrder(params))
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `claimOrder(uint64,txn)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimOrder: (params: CallParams<LimitOrderArgs['obj']['claimOrder(uint64,txn)void'] | LimitOrderArgs['tuple']['claimOrder(uint64,txn)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LimitOrderParamsFactory.claimOrder(params))
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `claimOwnerAsset(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimOwnerAsset: (params: CallParams<LimitOrderArgs['obj']['claimOwnerAsset(uint64)void'] | LimitOrderArgs['tuple']['claimOwnerAsset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LimitOrderParamsFactory.claimOwnerAsset(params))
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `optInToAsset(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<LimitOrderArgs['obj']['optInToAsset(uint64,pay)void'] | LimitOrderArgs['tuple']['optInToAsset(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LimitOrderParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `cancelOrder(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cancelOrder: (params: CallParams<LimitOrderArgs['obj']['cancelOrder(uint64)void'] | LimitOrderArgs['tuple']['cancelOrder(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LimitOrderParamsFactory.cancelOrder(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the LimitOrder smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `createOrder(txn,pay,uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createOrder: async (params: CallParams<LimitOrderArgs['obj']['createOrder(txn,pay,uint64,uint64)uint64'] | LimitOrderArgs['tuple']['createOrder(txn,pay,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LimitOrderParamsFactory.createOrder(params))
      return {...result, return: result.return as unknown as (undefined | LimitOrderReturns['createOrder(txn,pay,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `claimOrder(uint64,txn)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimOrder: async (params: CallParams<LimitOrderArgs['obj']['claimOrder(uint64,txn)void'] | LimitOrderArgs['tuple']['claimOrder(uint64,txn)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LimitOrderParamsFactory.claimOrder(params))
      return {...result, return: result.return as unknown as (undefined | LimitOrderReturns['claimOrder(uint64,txn)void'])}
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `claimOwnerAsset(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimOwnerAsset: async (params: CallParams<LimitOrderArgs['obj']['claimOwnerAsset(uint64)void'] | LimitOrderArgs['tuple']['claimOwnerAsset(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LimitOrderParamsFactory.claimOwnerAsset(params))
      return {...result, return: result.return as unknown as (undefined | LimitOrderReturns['claimOwnerAsset(uint64)void'])}
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `optInToAsset(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<LimitOrderArgs['obj']['optInToAsset(uint64,pay)void'] | LimitOrderArgs['tuple']['optInToAsset(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LimitOrderParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | LimitOrderReturns['optInToAsset(uint64,pay)void'])}
    },

    /**
     * Makes a call to the LimitOrder smart contract using the `cancelOrder(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cancelOrder: async (params: CallParams<LimitOrderArgs['obj']['cancelOrder(uint64)void'] | LimitOrderArgs['tuple']['cancelOrder(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LimitOrderParamsFactory.cancelOrder(params))
      return {...result, return: result.return as unknown as (undefined | LimitOrderReturns['cancelOrder(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LimitOrderClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current LimitOrder app
   */
  state = {
    /**
     * Methods to access global state for the current LimitOrder app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          orderIndex: result.orderIndex,
        }
      },
      /**
       * Get the current value of the orderIndex key in global state
       */
      orderIndex: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("orderIndex")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current LimitOrder app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the orders map in box state
       */
      orders: {
        /**
         * Get all current values of the orders map in box state
         */
        getMap: async (): Promise<Map<bigint, Order>> => { return (await this.appClient.state.box.getMap("orders")) as Map<bigint, Order> },
        /**
         * Get a current value of the orders map by key from box state
         */
        value: async (key: bigint | number): Promise<Order | undefined> => { return await this.appClient.state.box.getMapValue("orders", key) as Order | undefined },
      },
    },
  }

  public newGroup(): LimitOrderComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createOrder(txn,pay,uint64,uint64)uint64 method call against the LimitOrder contract
       */
      createOrder(params: CallParams<LimitOrderArgs['obj']['createOrder(txn,pay,uint64,uint64)uint64'] | LimitOrderArgs['tuple']['createOrder(txn,pay,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createOrder(params)))
        resultMappers.push((v) => client.decodeReturnValue('createOrder(txn,pay,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a claimOrder(uint64,txn)void method call against the LimitOrder contract
       */
      claimOrder(params: CallParams<LimitOrderArgs['obj']['claimOrder(uint64,txn)void'] | LimitOrderArgs['tuple']['claimOrder(uint64,txn)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimOrder(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimOwnerAsset(uint64)void method call against the LimitOrder contract
       */
      claimOwnerAsset(params: CallParams<LimitOrderArgs['obj']['claimOwnerAsset(uint64)void'] | LimitOrderArgs['tuple']['claimOwnerAsset(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimOwnerAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optInToAsset(uint64,pay)void method call against the LimitOrder contract
       */
      optInToAsset(params: CallParams<LimitOrderArgs['obj']['optInToAsset(uint64,pay)void'] | LimitOrderArgs['tuple']['optInToAsset(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a cancelOrder(uint64)void method call against the LimitOrder contract
       */
      cancelOrder(params: CallParams<LimitOrderArgs['obj']['cancelOrder(uint64)void'] | LimitOrderArgs['tuple']['cancelOrder(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cancelOrder(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the LimitOrder contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LimitOrderComposer
  }
}
export type LimitOrderComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createOrder(txn,pay,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createOrder(params?: CallParams<LimitOrderArgs['obj']['createOrder(txn,pay,uint64,uint64)uint64'] | LimitOrderArgs['tuple']['createOrder(txn,pay,uint64,uint64)uint64']>): LimitOrderComposer<[...TReturns, LimitOrderReturns['createOrder(txn,pay,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the claimOrder(uint64,txn)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimOrder(params?: CallParams<LimitOrderArgs['obj']['claimOrder(uint64,txn)void'] | LimitOrderArgs['tuple']['claimOrder(uint64,txn)void']>): LimitOrderComposer<[...TReturns, LimitOrderReturns['claimOrder(uint64,txn)void'] | undefined]>

  /**
   * Calls the claimOwnerAsset(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimOwnerAsset(params?: CallParams<LimitOrderArgs['obj']['claimOwnerAsset(uint64)void'] | LimitOrderArgs['tuple']['claimOwnerAsset(uint64)void']>): LimitOrderComposer<[...TReturns, LimitOrderReturns['claimOwnerAsset(uint64)void'] | undefined]>

  /**
   * Calls the optInToAsset(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<LimitOrderArgs['obj']['optInToAsset(uint64,pay)void'] | LimitOrderArgs['tuple']['optInToAsset(uint64,pay)void']>): LimitOrderComposer<[...TReturns, LimitOrderReturns['optInToAsset(uint64,pay)void'] | undefined]>

  /**
   * Calls the cancelOrder(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelOrder(params?: CallParams<LimitOrderArgs['obj']['cancelOrder(uint64)void'] | LimitOrderArgs['tuple']['cancelOrder(uint64)void']>): LimitOrderComposer<[...TReturns, LimitOrderReturns['cancelOrder(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the LimitOrder smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LimitOrderComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LimitOrderComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LimitOrderComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LimitOrderComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LimitOrderComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LimitOrderComposerResults<TReturns>>
}
export type LimitOrderComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

